{"version":3,"sources":["dev-server.js"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAA;AAC7B,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;AACrF,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAChC,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAChC,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,IAAI,eAAe,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAA;AACtD,IAAI,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,SAAS,GAClD,OAAO,CAAC,qBAAqB,CAAC,GAC9B,OAAO,CAAC,oBAAoB,CAAC;;;AAAA,AAGjC,IAAI,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI;;;AAAA,AAG9C,IAAI,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAA;;AAEtC,IAAI,GAAG,GAAG,OAAO,EAAE,CAAA;AACnB,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAErC,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,QAAQ,EAAE;AAC9D,YAAU,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU;AAC3C,OAAK,EAAE,IAAI;CACZ,CAAC,CAAA;;AAEF,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,QAAQ,EAAE;AAC9D,KAAG,EAAE,eAAM,EAAE;CACd,CAAC;;AAAA,AAEF,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,WAAW,EAAE;AACpD,aAAW,CAAC,MAAM,CAAC,gCAAgC,EAAE,UAAU,IAAI,EAAE,EAAE,EAAE;AACvE,iBAAa,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAA;AAC3C,MAAE,EAAE,CAAA;GACL,CAAC,CAAA;CACH,CAAC;;;AAAA,AAGF,oBAAY,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AACjD,MAAI,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,CAAA;AACjC,MAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,WAAO,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,CAAA;GAC9B;AACD,KAAG,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAA;CAC3C,CAAC;;;AAAA,AAGF,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,8BAA8B,CAAC,EAAE,CAAC;;;AAAA,AAGlD,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC;;;;AAAA,AAItB,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC;;;AAAA,AAGtB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;AAC5F,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;;AAE/C,IAAI,GAAG,GAAG,mBAAmB,GAAG,IAAI,CAAA;;AAEpC,aAAa,CAAC,cAAc,CAAC,YAAY;AACvC,SAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,GAAG,GAAG,IAAI,CAAC,CAAA;CAC5C,CAAC,CAAA;;AAEF,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE;AAC/C,MAAI,GAAG,EAAE;AACP,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAChB,WAAM;GACP;;;AAAA,AAGD,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,SAAS,EAAE;;GAEvC;CACF,CAAC,CAAA","file":"dev-server-compiled.js","sourcesContent":["require('./check-versions')()\nvar config = require('../config')\nif (!process.env.NODE_ENV) process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar opn = require('opn')\nvar proxyMiddleware = require('http-proxy-middleware')\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\nvar port = process.env.PORT || config.dev.port\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nvar proxyTable = config.dev.proxyTable\n\nvar app = express()\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: () => {}\n})\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// serve pure static assets\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static'))\n\nvar uri = 'http://localhost:' + port\n\ndevMiddleware.waitUntilValid(function () {\n  console.log('> Listening at ' + uri + '\\n')\n})\n\nmodule.exports = app.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n\n  // when env is testing, don't need open it\n  if (process.env.NODE_ENV !== 'testing') {\n    // opn(uri)\n  }\n})\n"]}