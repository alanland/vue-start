{"version":3,"sources":["elementCount.js"],"names":[],"mappings":";;;;;;;;;;AAQA,OAAO,CAAC,SAAS,GAAG,UAAU,QAAQ,EAAE,KAAK,EAAE;AAC7C,MAAI,CAAC,OAAO,GAAG,sBAAsB,GAAG,QAAQ,GAAG,eAAe,GAAG,KAAK,CAAA;AAC1E,MAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;AACrB,MAAI,CAAC,IAAI,GAAG,UAAU,GAAG,EAAE;AACzB,WAAO,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAA;GAC7B,CAAA;AACD,MAAI,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE;AAC1B,WAAO,GAAG,CAAC,KAAK,CAAA;GACjB,CAAA;AACD,MAAI,CAAC,OAAO,GAAG,UAAU,EAAE,EAAE;AAC3B,QAAI,IAAI,GAAG,IAAI,CAAA;AACf,WAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,QAAQ,EAAE;AAC1C,aAAO,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAA;KAClD,EAAE,CAAC,QAAQ,CAAC,EAAE,UAAU,GAAG,EAAE;AAC5B,QAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;KACnB,CAAC,CAAA;GACH,CAAA;CACF,CAAA","file":"elementCount-compiled.js","sourcesContent":["// A custom Nightwatch assertion.\n// the name of the method is the filename.\n// can be used in tests like this:\n//\n//   browser.assert.elementCount(selector, count)\n//\n// for how to write custom assertions see\n// http://nightwatchjs.org/guide#writing-custom-assertions\nexports.assertion = function (selector, count) {\n  this.message = 'Testing if element <' + selector + '> has count: ' + count\n  this.expected = count\n  this.pass = function (val) {\n    return val === this.expected\n  }\n  this.value = function (res) {\n    return res.value\n  }\n  this.command = function (cb) {\n    var self = this\n    return this.api.execute(function (selector) {\n      return document.querySelectorAll(selector).length\n    }, [selector], function (res) {\n      cb.call(self, res)\n    })\n  }\n}\n"]}